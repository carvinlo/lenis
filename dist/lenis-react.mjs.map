{"version":3,"file":"lenis-react.mjs","sources":["../../src/index.tsx","../../src/store.ts"],"sourcesContent":["'use client'\n\nimport Tempus from '@darkroom.engineering/tempus'\nimport Lenis, { type ScrollCallback } from 'lenis'\nimport {\n  createContext,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react'\nimport { Store, useStore } from './store'\nimport type { LenisContextValue, LenisProps, LenisRef } from './types'\n\nexport const LenisContext = createContext<LenisContextValue | null>(null)\n\nconst rootLenisContextStore = new Store<LenisContextValue | null>(null)\n\n// Fall back to an empty object if both context and store are not available\nconst fallbackContext: Partial<LenisContextValue> = {}\n\n/**\n * Hook to access the Lenis instance and its methods\n *\n * @example <caption>Scroll callback</caption>\n *          useLenis((lenis) => {\n *            if (lenis.isScrolling) {\n *              console.log('Scrolling...')\n *            }\n *\n *            if (lenis.progress === 1) {\n *              console.log('At the end!')\n *            }\n *          })\n *\n * @example <caption>Scroll callback with dependencies</caption>\n *          useLenis((lenis) => {\n *            if (lenis.isScrolling) {\n *              console.log('Scrolling...', someDependency)\n *            }\n *          }, [someDependency])\n * @example <caption>Scroll callback with priority</caption>\n *          useLenis((lenis) => {\n *            if (lenis.isScrolling) {\n *              console.log('Scrolling...')\n *            }\n *          }, [], 1)\n * @example <caption>Instance access</caption>\n *          const lenis = useLenis()\n *\n *          handleClick() {\n *            lenis.scrollTo(100, {\n *              lerp: 0.1,\n *              duration: 1,\n *              easing: (t) => t,\n *              onComplete: () => {\n *                console.log('Complete!')\n *              }\n *            })\n *          }\n */\nexport function useLenis(\n  callback?: ScrollCallback,\n  deps: any[] = [],\n  priority = 0\n) {\n  // Try to get the lenis instance from the context first\n  const localContext = useContext(LenisContext)\n  // Fall back to the root store if the context is not available\n  const rootContext = useStore(rootLenisContextStore)\n  // Fall back to the fallback context if all else fails\n  const currentContext = localContext ?? rootContext ?? fallbackContext\n\n  const { lenis, addCallback, removeCallback } = currentContext\n\n  useEffect(() => {\n    if (!callback || !addCallback || !removeCallback || !lenis) return\n\n    addCallback(callback, priority)\n    callback(lenis)\n\n    return () => {\n      removeCallback(callback)\n    }\n  }, [lenis, addCallback, removeCallback, priority, ...deps])\n\n  return lenis\n}\n\n/**\n * React component to setup a Lenis instance\n */\nconst ReactLenis = forwardRef<LenisRef, LenisProps>(\n  (\n    {\n      children,\n      root = false,\n      options = {},\n      autoRaf = true,\n      rafPriority = 0,\n      className,\n      props,\n    }: LenisProps,\n    ref\n  ) => {\n    const wrapperRef = useRef<HTMLDivElement | null>(null)\n    const contentRef = useRef<HTMLDivElement | null>(null)\n\n    const [lenis, setLenis] = useState<Lenis | undefined>(undefined)\n\n    // Setup ref\n    useImperativeHandle(\n      ref,\n      () => ({\n        wrapper: wrapperRef.current,\n        content: contentRef.current,\n        lenis,\n      }),\n      [lenis]\n    )\n\n    // Setup lenis instance\n    useEffect(() => {\n      const lenis = new Lenis({\n        ...options,\n        ...(!root && {\n          wrapper: wrapperRef.current!,\n          content: contentRef.current!,\n        }),\n      })\n\n      setLenis(lenis)\n\n      return () => {\n        lenis.destroy()\n        setLenis(undefined)\n      }\n    }, [root, JSON.stringify(options)])\n\n    // Setup raf\n    useEffect(() => {\n      if (!lenis || !autoRaf) return\n\n      return Tempus.add((time: number) => lenis.raf(time), rafPriority)\n    }, [lenis, autoRaf, rafPriority])\n\n    // Handle callbacks\n    const callbacksRefs = useRef<\n      {\n        callback: ScrollCallback\n        priority: number\n      }[]\n    >([])\n\n    const addCallback: LenisContextValue['addCallback'] = useCallback(\n      (callback, priority) => {\n        callbacksRefs.current.push({ callback, priority })\n        callbacksRefs.current.sort((a, b) => a.priority - b.priority)\n      },\n      []\n    )\n\n    const removeCallback: LenisContextValue['removeCallback'] = useCallback(\n      (callback) => {\n        callbacksRefs.current = callbacksRefs.current.filter(\n          (cb) => cb.callback !== callback\n        )\n      },\n      []\n    )\n\n    // This makes sure to set the global context if the root is true\n    useEffect(() => {\n      if (root && lenis) {\n        rootLenisContextStore.set({ lenis, addCallback, removeCallback })\n\n        return () => rootLenisContextStore.set(null)\n      }\n    }, [root, lenis, addCallback, removeCallback])\n\n    // Setup callback listeners\n    useEffect(() => {\n      if (!lenis) return\n\n      const onScroll: ScrollCallback = (data) => {\n        for (let i = 0; i < callbacksRefs.current.length; i++) {\n          callbacksRefs.current[i].callback(data)\n        }\n      }\n\n      lenis.on('scroll', onScroll)\n\n      return () => {\n        lenis.off('scroll', onScroll)\n      }\n    }, [lenis])\n\n    return (\n      <LenisContext.Provider\n        value={{ lenis: lenis!, addCallback, removeCallback }}\n      >\n        {root ? (\n          children\n        ) : (\n          <div ref={wrapperRef} className={className} {...props}>\n            <div ref={contentRef}>{children}</div>\n          </div>\n        )}\n      </LenisContext.Provider>\n    )\n  }\n)\n\nexport * from './types'\nexport { ReactLenis as Lenis, ReactLenis }\nexport default ReactLenis\n","import { useEffect, useState } from 'react'\n\ntype Listener<S> = (state: S) => void\n\nexport class Store<S> {\n  private listeners: Listener<S>[] = []\n\n  constructor(private state: S) {}\n\n  set(state: S) {\n    this.state = state\n\n    for (let listener of this.listeners) {\n      listener(this.state)\n    }\n  }\n\n  subscribe(listener: Listener<S>) {\n    this.listeners = [...this.listeners, listener]\n    return () => {\n      this.listeners = this.listeners.filter((l) => l !== listener)\n    }\n  }\n\n  get() {\n    return this.state\n  }\n}\n\nexport function useStore<S>(store: Store<S>) {\n  const [state, setState] = useState(store.get())\n\n  useEffect(() => {\n    return store.subscribe((state) => setState(state))\n  }, [store])\n\n  return state\n}\n"],"names":["LenisContext","createContext","rootLenisContextStore","Store","constructor","state","this","listeners","set","listener","subscribe","filter","l","get","fallbackContext","useLenis","callback","deps","priority","localContext","useContext","rootContext","useStore","store","setState","useState","useEffect","currentContext","_a","lenis","addCallback","removeCallback","ReactLenis","forwardRef","children","root","options","autoRaf","rafPriority","className","props","ref","wrapperRef","useRef","contentRef","setLenis","undefined","useImperativeHandle","wrapper","current","content","Lenis","Object","assign","destroy","JSON","stringify","Tempus","add","time","raf","callbacksRefs","useCallback","push","sort","a","b","cb","onScroll","data","i","length","on","off","_jsx","Provider","value"],"mappings":"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"}